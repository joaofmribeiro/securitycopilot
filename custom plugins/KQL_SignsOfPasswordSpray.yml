Descriptor:
  Name: Get-SignsOfPasswordSprayAttack 
  DisplayName: Password Spray Attack (Entra ID) 
  Description: Hunt for any signs of password spray attacks against any of our Entra ID tenants (uses Sentinel Workspace tables)

SkillGroups:
  - Format: KQL
    Skills:
      - Name: Get-SignsOfPasswordSprayAttack 
        DisplayName: Password Spray Attack (Entra ID)
        Description: Hunt for any signs of password spray attacks against any of our Entra ID tenants (uses Sentinel Workspace tables)
        Inputs:
          - Name: hourorday
            Description: hours (h) or days (d)
            Required: false
            DefaultValue: d
          - Name: unit
            Description: number of hours or days
            Required: false
            DefaultValue: 2
          - Name: User
            Description: The user associated with the alert
            Required: false
          - Name: Device
            Description: The device associated with the alert
            Required: false            
        Settings:
          Target: Sentinel
          Template: |-
        let lookback = 14d;
        let AverageFailedLogonPerUser = union 
            workspace('workspace1').IdentityLogonEvents,
            workspace('workspace2').IdentityLogonEvents
        | where TimeGenerated > ago(lookback)
        | where isnotempty(AccountUpn)
        | where ActionType == "LogonFailed"
        | project TimeGenerated, AccountUpn = tolower(AccountUpn), ActionType
        | summarize FailedLogonsPerMinute = count() by bin(TimeGenerated, 1m), AccountUpn
        | summarize FailedLogonAverage = avg(FailedLogonsPerMinute) by AccountUpn
        | extend FailedLogonAverageRounded = round(FailedLogonAverage);
        let EnabledAccounts = union 
            workspace('workspace1').IdentityInfo,
            workspace('workspace2').IdentityInfo
        | where TimeGenerated >= ago(lookback)
        | where IsAccountEnabled
        | where isnotempty(AccountUpn)
        | project AccountUPN = tolower(AccountUpn)
        | distinct AccountUPN;
        union 
            workspace('workspace1').SigninLogs,
            workspace('workspace2').SigninLogs
        | where TimeGenerated >= ago(1h)
        | where IsInteractive
        | where isnotempty(ResultDescription)
        | summarize UnknownIPs = make_set(IPAddress) by bin(TimeGenerated, 1m), UserPrincipalName, AppDisplayName
        | where UserPrincipalName has_any (EnabledAccounts)
        | extend NumberOfFailedAttemptsPerMinute = array_length(UnknownIPs), UserPrincipalName = tolower(UserPrincipalName)
        | join kind=inner AverageFailedLogonPerUser on $left.UserPrincipalName == $right.AccountUpn
        | where NumberOfFailedAttemptsPerMinute > FailedLogonAverageRounded
        | project-away AccountUpn
